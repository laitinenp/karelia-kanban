openapi: '3.0.0'
info:
 version: 1.0.0
 title: Karelia Kanban API
 description: (v0.1) Karelia Kanban / JIT API for educational purposes 3/2023. Kanban is a Just In Time (JIT) production process designed to optimise the flow of the raw resources and components used in the creation of an end product. Petri Laitinen, Karelia UAS
servers:
 - url: http://localhost:8080/
   description: (v0.1) "Sample Kanban API Application"

tags:
  - name: Boards
    description: Boards CRUD
  - name: Tickets
    description: Tickets CRUD
  - name: Services
    description: Data services

paths:

  /api/kanban/boards:
    get:
      summary: Returns a list of available boards
      tags: 
        - Boards
      security:
        - bearerAuth: []
      responses:
        '200':
          description: (v0.1) Succesfully returned a list of available kanban boards
          content:
            application/json:
              schema:
                description: list of service descriptors
                type: array
                items:
                  $ref: '#/components/schemas/Board'
            text/csv:
              schema:
                type: string
              example: >-
                id,name,description,learningObjectives
                DD10004,API Design & Development,API Design & Development using REST, Student is able to comprehend the ...
        '400':
          description: Invalid ID supplied
        '404':
          description: Board not found
        '405':
          description: Validation exception
        '415':
          description: Unsupported Media Type
    post:
      summary: Creates a new kanban board
      tags: 
        - Boards
      security:
        - bearerAuth: []
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Board'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Board'
        required: true
      responses:
        '201':
          description: Created
        '405':
          description: Invalid input
          

  /api/kanban/boards/{boardId}:
    get:
      summary: Returns a single board
      tags: 
        - Boards
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: boardId
          schema:
            type: string
            format: uuid
            example: B123
          required: true

      responses:
        '200':
          description: (v1.0) Succesfully returned a Board object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        '404':
          description: Not found
        '415':
          description: Unsupported Media Type
    head:
      summary: Returns the HTTP header data for a single board
      tags: 
        - Boards
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: boardId
          schema:
            type: string
            format: uuid
            example: B123
          required: true

      responses:
        '200':
          description: (v1.0) Succesfully returned a Board object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        '404':
          description: Not found
        '415':
          description: Unsupported Media Type
    put:
      summary: Modifies an existing kanban board
      tags: 
        - Boards
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: boardId
          schema:
            type: string
            format: uuid
            example: B123
          required: true
      requestBody:
        description: Update data for a kanban board
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Board'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Board'
        required: true
      responses:
        '200':
          description: Created
        '405':
          description: Invalid input
    delete:
      summary: Delete an existing kanban board
      tags: 
        - Boards
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: boardId
          schema:
            type: string
            format: uuid
            example: B123
          required: true
      responses:
        '200':
          description: Successfully deleted
        '404':
          description: Not found
        '405':
          description: Method not allowed

  /api/kanban/boards/{boardId}/tickets:
    get:
      summary: Returns a list of tickets inside a board
      tags: 
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: boardId
          schema:
            type: string
            format: uuid
            example: B123
          required: true
      responses:
        200:
          description: (v1.0) Succesfully returned a list of tickets
          content:
            application/json:
              schema:
                description: list of service descriptors
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        '405':
          description: Validation exception
    post:
      summary: Creates a new ticket to kanban board
      tags: 
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: boardId
          schema:
            type: string
            format: uuid
            example: B123
          required: true
      requestBody:
        description: Create a new ticket
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        '201':
          description: Created
        '405':
          description: Invalid input

          
  /api/kanban/boards/{boardId}/tickets/{ticketId}:
    get:
      summary: Returns a single ticket
      tags: 
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: ticketId
          schema:
            type: string
            format: uuid
            example: T123
          required: true
        - in: path
          name: boardId
          schema:
            type: string
            format: uuid
            example: B123
          required: true
      responses:
        '200':
          description: (v1.0) Succesfully returned a Board object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid ID supplied
        '404':
          description: Ticket not found
        '415':
          description: Unsupported Media Type
    head:
      summary: Returns the HTTP header data for a single ticket
      tags: 
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: boardId
          schema:
            type: string
            format: uuid
            example: B123
          required: true
        - in: path
          name: ticketId
          schema:
            type: string
            format: uuid
            example: B123
          required: true

      responses:
        '200':
          description: (v1.0) Succesfully returned a Ticket object from Kanban board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Not found
        '415':
          description: Unsupported Media Type
    put:
      summary: Modifies an existing ticket in an kanban board
      tags: 
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: boardId
          schema:
            type: string
            format: uuid
            example: B123
          required: true
        - in: path
          name: ticketId
          schema:
            type: string
            format: uuid
            example: B123
          required: true
      requestBody:
        description: Update data for a kanban board
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        '200':
          description: Created
        '405':
          description: Invalid input
    delete:
      summary: Delete an existing ticket
      tags: 
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: boardId
          schema:
            type: string
            format: uuid
            example: B123
          required: true
        - in: path
          name: ticketId
          schema:
            type: string
            format: uuid
            example: B123
          required: true
      responses:
        '200':
          description: Successfully deleted
        '404':
          description: Not found
        '405':
          description: Method not allowed

components:

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
      
  schemas:
    User:
      type: object
      properties:
        userId:
          type: integer
          nullable: false
          description: (v1.0) identifier
        forename:
          type: string
          nullable: false
          description: (v1.0) forename
          maxLength: 100
        surname:
          type: string
          nullable: false
          description: (v1.0) family name
          maxLength: 100
        username:
          type: string
          nullable: false
          description: (v1.0) forename
          maxLength: 100
        password:
          type: string
          nullable: false
          description: (v1.0) forename
          maxLength: 100
        email:
          type: string
          nullable: false
          description: (v1.0) email address
          maxLength: 1024

      example:
        userId: 123
        forename: Kalle
        surname: Karelianisti
        username: kalle
        password: sosecret
        email: kalle@somemail.com
    Board:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: false
          description: (v1.0) identifier
        name:
          type: string
          nullable: true
          description: (v1.0) course name
          maxLength: 100
        description:
          type: string
          nullable: true
          description: (v1.0) course description
          maxLength: 1024
        responsiblePerson:
          $ref: '#/components/schemas/User'  
      example:
        id: B123
        name: Karelia Kanban API
        description: Create an implementation for this API
        responsiblePerson:
          userId: 123
          forename: Kalle
          surname: Karelianisti
          username: kalle
          password: sosecret
          email: kalle@somemail.com
    Ticket:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: false
          example: T123
        name:
          type: string
          nullable: true
          description: (v1.0) Course implementation description
          maxLength: 100
          example: API Design & Development
        createdDate:
          type: string
          format: date
          description: creation date
          example: "2021-02-28"
        dueDate:
          type: string
          format: date
          description: course end date. can be null.
          nullable: true
          example: "2023-06-30"
        responsiblePerson:
          $ref: '#/components/schemas/User'
      example:
        id: T123
        name: Create a node server
        desicription: using the GenerateServer tools in the Swagger editor
        dueDate: "2023-06-30"
        responsiblePerson:
          userId: 123
          forename: Kalle
          surname: Karelianisti
          username: kalle
          password: sosecret
          email: kalle@somemail.com